version: '3.8'

services:
  # MTR MCP Server - FastAPI with MCP integration
  mtr-mcp-server:
    build: .
    container_name: mtr-mcp-server
    ports:
      - "${HOST_PORT:-8080}:8080"  # Default to 8080, override with HOST_PORT env var
    environment:
      - PYTHONUNBUFFERED=1
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8080
      - LOG_LEVEL=info
    env_file:
      - .env  # Load environment variables from .env file
    restart: unless-stopped
    command: ["python", "fastapi_mcp_integration.py", "8080", "0.0.0.0"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/mcp/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - mcp-network

  # ============================================================================
  # OPTIONAL: Docker NGINX (Only for standalone deployments)
  # ============================================================================
  # If you already have NGINX running on your host (port 80/443), 
  # you DON'T need this container!
  # 
  # Use this ONLY if:
  # - You're deploying on a system WITHOUT existing NGINX
  # - You want Docker to manage the full stack including NGINX
  #
  # To use: docker-compose --profile production up -d
  # ============================================================================
  
  # COMMENTED OUT - Use host NGINX instead
  # nginx:
  #   image: nginx:alpine
  #   container_name: mtr-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx-mcp.conf:/etc/nginx/conf.d/default.conf:ro
  #     # Mount SSL certificates if available
  #     # - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - mtr-mcp-server
  #   restart: unless-stopped
  #   profiles:
  #     - production  # Only run with: docker-compose --profile production up
  #   healthcheck:
  #     test: ["CMD", "nginx", "-t"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - mcp-network

networks:
  mcp-network:
    driver: bridge