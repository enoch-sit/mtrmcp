# NGINX configuration for MTR MCP FastAPI Server
# This configuration demonstrates how to serve the MCP server under /mcp
# as described in fastapi-integration.md

# Upstream servers
upstream mtr_fastapi {
    server mtr-mcp-server:8000;
}

upstream mtr_mcp_direct {
    server mtr-mcp-server:8001;
}

# Map for WebSocket upgrade
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # File upload size limit
    client_max_body_size 100M;
    
    # Main FastAPI application
    location / {
        proxy_pass http://mtr_fastapi;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # MCP SSE endpoint proxy (Approach 1 from documentation)
    # This serves the MCP server under /mcp path
    location /mcp {
        # Proxy to the direct MCP SSE endpoint
        proxy_pass http://mtr_mcp_direct/sse;
        
        # WebSocket and upgrade headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SSE-specific settings
        proxy_buffering off;
        proxy_cache off;
        proxy_set_header Accept text/event-stream;
        proxy_set_header Cache-Control no-cache;
        
        # Timeout settings for long-lived SSE connections
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        proxy_send_timeout 300s;
        
        # CORS headers for SSE (if needed)
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, Accept" always;
    }
    
    # Alternative: MCP via FastAPI proxy (Approach 2 from documentation)
    location /mcp-fastapi {
        proxy_pass http://mtr_fastapi/mcp;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Handle redirects
        proxy_redirect off;
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://mtr_fastapi/health;
        proxy_set_header Host $host;
        access_log off;
    }
    
    # API documentation
    location /docs {
        proxy_pass http://mtr_fastapi/docs;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Static files (if any)
    location /static {
        proxy_pass http://mtr_fastapi/static;
        expires 1y;
        add_header Cache-Control public;
    }
    
    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|git|svn|htaccess|htpasswd)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# HTTPS configuration (uncomment and configure for production)
# server {
#     listen 443 ssl http2;
#     server_name your-domain.com;
#     
#     ssl_certificate /etc/nginx/ssl/fullchain.crt;
#     ssl_certificate_key /etc/nginx/ssl/private.key;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_prefer_server_ciphers on;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#     ssl_stapling on;
#     ssl_stapling_verify on;
#     resolver 8.8.8.8 8.8.4.4 valid=300s;
#     
#     # Same location blocks as above
#     # ...
# }